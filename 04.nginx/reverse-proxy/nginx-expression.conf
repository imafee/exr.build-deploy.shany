# 测试 location 表达式（含修饰符）

server {
    listen       80;
    server_name  localhost;
    # 静态资源目录
    root   /usr/share/nginx/html;
    # 目录的索引文件:<filename>.<suffix>
    index  index.html index.htm;

    # 通用匹配，所有路径(path)都会匹配其中的规则(只不过通常权重低而没应用)
    location / {
        add_header X-Config "/";
        try_files  $uri $uri.html $uri/index.html /index.html;
    }
    # http://localhost:80/     # index.html
    # http://localhost:80      # index.html
    # http://localhost:80/first    # index.html
    # http://localhost:80/download/first.md     # Content-Type: application/octet-stream

     location /test {
        add_header X-Config "/test";
        proxy_pass http://api-server:3000;
    }
    # http://localhost:80/test           匹配
    # http://localhost:80/test/          匹配
    # http://localhost:80/test1          匹配，但下面的规则更加精确，故未命中
    # http://localhost:80/testabc        匹配，因为没有其他规则了


    location /test1 {
        add_header X-Config '/test1';
        proxy_pass http://api-server:3000;
    }
    # 字符匹配
    # http://localhost:80/test1           匹配
    # http://localhost:80/any/test1       不匹配
    # http://localhost:80/test1/          匹配
    # http://localhost:80/test11/1        匹配
    # http://localhost:80/test11/1        匹配

    
    location = /test2 {
        add_header X-Config '/test2';
        proxy_pass http://api-server:3000;
    }
    # http://localhost:80/test2           匹配
    # http://localhost:80/test21          不匹配
    # http://localhost:80/test2/          不匹配
    # http://localhost:80/any/test2/      不匹配


    location ~ .*test3.* {
        add_header X-Config '~ .*test3.*';
        proxy_pass http://api-server:3000;
    }
    # 实验：正则表达式符[~ expression]
    # http://localhost:8120/test3           ok 
    # http://localhost:8120/test3/           ok 
    # http://localhost:8120/test3/1          ok
    # http://localhost:8120/test31/1          ok
    # http://localhost:8120/aatest3aa      ok
    # http://localhost:8120/any/aatest3aa      ok


    location ^~ /test4 {
        add_header X-Config '^~ /test4';
        proxy_pass http://api-server:3000;
    }
    # 实验：前缀匹配
    # http://localhost:8120/test4           ok 
    # http://localhost:8120/test4/          ok
    # http://localhost:8120/test41/          ok
    # http://localhost:8120/test41/1          ok
    # http://localhost:8120/atest4         not ok

}